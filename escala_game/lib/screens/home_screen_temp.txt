import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/game_provider.dart';
import '../services/storage_service.dart';
import 'lobby_screen.dart';
import '../widgets/home/menu_button_widget.dart';
import '../widgets/home/history_section_widget.dart';
import '../widgets/home/instructions_dialog_widget.dart';
import '../widgets/home/recent_games_dialog_widget.dart';
import '../utils/styles.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final TextEditingController gameCodeController = TextEditingController();
  final TextEditingController playerNameController = TextEditingController();
  final StorageService storageService = StorageService();
  List<String> gameHistory = [];
  int? selectedTeam;
  int? selectedTime; // Nuevo: para almacenar el tiempo seleccionado

  @override
  void initState() {
    super.initState();
    _loadGameHistory();
  }

  Future<void> _loadGameHistory() async {
    gameHistory = await storageService.getGameHistory();
    setState(() {});
  }

  Future<void> _showNameDialog(BuildContext context, GameProvider gameProvider,
      {required VoidCallback onSuccess}) async {
    if (gameProvider.playerName != null) {
      onSuccess();
      return;
    }

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return AlertDialog(
          title: const Text('Ingresa tu nombre'),
          content: TextField(
            controller: playerNameController,
            decoration: const InputDecoration(labelText: 'Nombre'),
            autofocus: true,
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('Cancelar'),
            ),
            TextButton(
              onPressed: () async {
                final name = playerNameController.text.trim();
                if (name.isNotEmpty) {
                  await gameProvider.savePlayerName(name);
                  Navigator.pop(context);
                  onSuccess();
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('Por favor, ingresa un nombre válido'),
                    ),
                  );
                }
              },
              child: const Text('Continuar'),
            ),
          ],
        );
      },
    );
  }

  Future<void> _showTimeSelectionDialog(BuildContext context,
      GameProvider gameProvider) async {
    selectedTime = null;
    return showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text('Selecciona la duración del turno'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Row(
                    children: [
                      Radio<int>(
                        value: 60,
                        groupValue: selectedTime,
                        onChanged: (value) {
                          setState(() => selectedTime = value);
                        },
                      ),
                      const Text('60 segundos'),
                    ],
                  ),
                  Row(
                    children: [
                      Radio<int>(
                        value: 120,
                        groupValue: selectedTime,
                        onChanged: (value) {
                          setState(() => selectedTime = value);
                        },
                      ),
                      const Text('2 minutos'),
                    ],
                  ),
                  Row(
                    children: [
                      Radio<int>(
                        value: 180,
                        groupValue: selectedTime,
                        onChanged: (value) {
                          setState(() => selectedTime = value);
                        },
                      ),
                      const Text('3 minutos'),
                    ],
                  ),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: const Text('Cancelar'),
                ),
                TextButton(
                  onPressed: () {
                    if (selectedTime != null) {
                      Navigator.pop(context);
                    } else {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('Por favor, selecciona una opción'),
                        ),
                      );
                    }
                  },
                  child: const Text('Continuar'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final gameProvider = Provider.of<GameProvider>(context);
    final titleStyle = TextStyle(
      fontSize: 32,
      fontWeight: FontWeight.bold,
      foreground: Paint()
        ..shader = LinearGradient(
          colors: [Colors.purple, Colors.blue],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ).createShader(const Rect.fromLTWH(0, 0, 200, 70)),
    );

    final subtitleStyle = const TextStyle(
      fontSize: 16,
      color: Colors.white70,
      fontStyle: FontStyle.italic,
    );

    return Scaffold(
      body: Container(
        width: double.infinity,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Colors.blueGrey.shade900,
              Colors.blueGrey.shade700,
            ],
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Container(
                  padding: const EdgeInsets.all(24),
                  margin: const EdgeInsets.only(top: 24, bottom: 16),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    gradient: LinearGradient(
                      colors: [
                        Colors.purple.shade900.withOpacity(0.7),
                        Colors.blue.shade800.withOpacity(0.7)
                      ],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.3),
                        blurRadius: 10,
                        offset: const Offset(0, 5),
                      ),
                    ],
                  ),
                  child: Column(
                    children: [
                      Text('Escala Game', style: titleStyle),
                      const SizedBox(height: 16),
                      Text(
                        gameProvider.playerName != null
                            ? '¡Bienvenido, ${gameProvider.playerName}!'
                            : '¡Juega y descubre los pesos!',
                        style: subtitleStyle,
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 28),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    ElevatedButton.icon(
                      onPressed: () {
                        showDialog(
                          context: context,
                          builder: (context) => const InstructionsDialogWidget(),
                        );
                      },
                      icon: const Icon(Icons.info_outline, color: Colors.white),
                      label: const Text('Instrucciones',
                        style: TextStyle(color: Colors.white),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.amber[700],
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(30),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 28),
                MenuButtonWidget(
                  label: 'Crear Partida',
                  onPressed: () async {
                    await _showNameDialog(
                      context,
                      gameProvider,
                      onSuccess: () async {
                        await _showTimeSelectionDialog(context, gameProvider);
                        if (selectedTime != null) {
                          try {
                            await gameProvider.createGame(
                                roundTimeSeconds: selectedTime!);
                            if (gameProvider.currentGame != null) {
                              await _loadGameHistory();
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (_) =>
                                      LobbyScreen(
                                          gameCode: gameProvider.currentGame!
                                              .gameCode),
                                ),
                              );
                            }
                          } catch (e) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                  content: Text('Error al crear el juego: $e')),
                            );
                          }
                        }
                      },
                    );
                  },
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Expanded(
                      child: MenuButtonWidget(
                        label: 'Unirse con Código',
                        onPressed: () {
                          showDialog(
                            context: context,
                            builder: (context) {
                              return StatefulBuilder(
                                builder: (context, setState) {
                                  return AlertDialog(
                                    title: const Text('Unirse a un Juego'),
                                    content: Column(
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        TextField(
                                          controller: gameCodeController,
                                          decoration: const InputDecoration(
                                              labelText: 'Código del Juego'),
                                        ),
                                        const SizedBox(height: 16),
                                        Row(
                                          mainAxisAlignment: MainAxisAlignment.center,
                                          children: [
                                            const Text('Equipo:',
                                                style: TextStyle(
                                                    fontWeight: FontWeight.bold)),
                                            Radio(
                                              value: 1,
                                              groupValue: selectedTeam,
                                              onChanged: (value) {
                                                setState(
                                                    () => selectedTeam = value as int);
                                              },
                                            ),
                                            const Text('1'),
                                            Radio(
                                              value: 2,
                                              groupValue: selectedTeam,
                                              onChanged: (value) {
                                                setState(
                                                    () => selectedTeam = value as int);
                                              },
                                            ),
                                            const Text('2'),
                                          ],
                                        ),
                                      ],
                                    ),
                                    actions: [
                                      TextButton(
                                        onPressed: () {
                                          Navigator.pop(context);
                                        },
                                        child: const Text('Cancelar'),
                                      ),
                                      TextButton(
                                        onPressed: () async {
                                          await _showNameDialog(
                                            context,
                                            gameProvider,
                                            onSuccess: () async {
                                              final String gameCode =
                                                  gameCodeController.text.trim();
                                              final String playerName =
                                                  gameProvider.playerName ??
                                                      (playerNameController.text
                                                          .trim()
                                                          .isNotEmpty
                                                          ? playerNameController.text.trim()
                                                          : 'Jugador Temporal');
                                              if (gameCode.isNotEmpty &&
                                                  selectedTeam != null) {
                                                if (gameProvider.playerName == null &&
                                                    playerName != 'Jugador Temporal') {
                                                  await gameProvider.savePlayerName(
                                                      playerName);
                                                }
                                                try {
                                                  await gameProvider.joinGame(
                                                      gameCode: gameCode,
                                                      playerName: playerName,
                                                      groupId: selectedTeam!);
                                                  Navigator.pop(context);
                                                  await _loadGameHistory();
                                                  if (gameProvider.currentGame != null) {
                                                    Navigator.push(
                                                      context,
                                                      MaterialPageRoute(
                                                        builder: (_) =>
                                                            LobbyScreen(
                                                                gameCode: gameCodeController.text),
                                                      ),
                                                    );
                                                  }
                                                } catch (e) {
                                                  ScaffoldMessenger
                                                      .of(context)
                                                      .showSnackBar(
                                                    SnackBar(
                                                        content: Text(
                                                            'Error al unirse al juego: $e')),
                                                  );
                                                  await _loadGameHistory();
                                                }
                                              } else {
                                                ScaffoldMessenger
                                                    .of(context)
                                                    .showSnackBar(
                                                  const SnackBar(
                                                      content: Text(
                                                          'Por favor, ingresa el código y selecciona un equipo')),
                                                );
                                              }
                                            },
                                          );
                                        },
                                        child: const Text('Unirse'),
                                      ),
                                    ],
                                  );
                                },
                              );
                            },
                          );
                        },
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: MenuButtonWidget(
                        label: 'Ver Partidas Recientes',
                        onPressed: () async {
                          await _showNameDialog(
                            context,
                            gameProvider,
                            onSuccess: () {
                              showDialog(
                                context: context,
                                builder: (context) => RecentGamesDialog(
                                  onJoinGame: (String gameCode) async {
                                    try {
                                      await gameProvider.joinGame(
                                        gameCode: gameCode,
                                        playerName: gameProvider.playerName!,
                                        groupId: selectedTeam ?? 1,
                                      );
                                      
                                      if (mounted) {
                                        Navigator.push(
                                          context,
                                          MaterialPageRoute(
                                            builder: (_) => LobbyScreen(gameCode: gameCode),
                                          ),
                                        );
                                      }
                                    } catch (e) {
                                      ScaffoldMessenger.of(context).showSnackBar(
                                        SnackBar(content: Text('Error al unirse a la partida: $e')),
                                      );
                                    }
                                  },
                                ),
                              );
                            },
                          );
                        },
                      ),
                    ),
                  ],
                ),
                const Spacer(),
                HistorySectionWidget(
                  gameHistory: gameHistory,
                  onGameSelected: (gameCode) async {
                    gameCodeController.text = gameCode;
                    await _showNameDialog(
                      context,
                      gameProvider,
                      onSuccess: () async {
                        try {
                          await gameProvider.joinGame(
                            gameCode: gameCode,
                            playerName: gameProvider.playerName!,
                            groupId: selectedTeam ?? 1,
                          );
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (_) => LobbyScreen(gameCode: gameCode),
                            ),
                          );
                        } catch (e) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                                content: Text('Error al unirse al juego: $e')),
                          );
                        }
                      },
                    );
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
